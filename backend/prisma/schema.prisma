generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String?   // nullable for OAuth
  name       String?
  googleId   String?   @unique
  profilePic String?   // Cloudinary URL
  createdAt  DateTime  @default(now())
  events     Event[]   // User can have multiple Events
  feedbackResponses FeedbackResponse[] // User can have multiple FeedbackResponses
}

model Event {
  id             String         @id @default(uuid())
  title          String
  description    String
  date           DateTime
  bannerUrl      String
   ticketPrice Decimal?  @db.Decimal(10, 2)  // Optional ticket price with 2 decimal places
  ownerId        String
  owner          User           @relation(fields: [ownerId], references: [id])
  createdAt      DateTime       @default(now())
  feedbackForm   FeedbackForm?  // <--- ADDED: Inverse relation for one-to-one with FeedbackForm
  feedbackResponses FeedbackResponse[] // Event can have many FeedbackResponses
}

model FeedbackForm {
  id        String   @id @default(uuid())
  eventId   String   @unique
  schema    Json     // Dynamic array of questions/fields
  event     Event    @relation(fields: [eventId], references: [id])
}

model FeedbackResponse {
  id          String    @id @default(uuid())
  eventId     String
  userId      String
  answers     Json      // [{questionId, answer}]
  submittedAt DateTime  @default(now())
  event       Event     @relation(fields: [eventId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
}